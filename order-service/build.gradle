buildscript {
    dependencies {
        classpath "org.apache.avro:avro-tools:1.12.0"
    }
}

plugins {
    id 'org.shopping.demo.common-plugins'
    id 'org.shopping.demo.kafka-settings'
    id 'org.flywaydb.flyway' version "11.1.1"
    id 'com.github.davidmc24.gradle.plugin.avro' version "1.9.1"
}

group = 'org.order.demo'
version = '1.0.0'

ext {
    set('springCloudVersion', "2024.0.0")
}

dependencies {
    /* SPRING */
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'

    // TESTS
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'

    /* DATA */
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    /* MAPPING */
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    /* TESTS */
    testImplementation 'io.rest-assured:rest-assured:5.5.0'
    testImplementation 'org.testcontainers:postgresql:1.20.4'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.4'
    testImplementation 'org.testcontainers:testcontainers:1.20.4'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

import org.apache.avro.tool.SpecificCompilerTool

def avroSchemasDir = "src/main/resources/avro"
def avroCodeGenerationDir = "src/main/java"

sourceSets.main.java.srcDirs += [avroCodeGenerationDir]

tasks.register('customAvroCodeGeneration') {
    inputs.dir(avroSchemasDir)
    outputs.dir(avroCodeGenerationDir)

    logging.captureStandardOutput(LogLevel.INFO)
    logging.captureStandardError(LogLevel.ERROR)
    doLast {
        new SpecificCompilerTool().run(System.in, System.out, System.err, List.of(
                "-encoding", "UTF-8",
                "-string",
                "-fieldVisibility", "private",
                "-noSetters",
                "schema", "$projectDir/$avroSchemasDir".toString(), "$projectDir/$avroCodeGenerationDir".toString()
        ))
    }
}

tasks.withType(JavaCompile).configureEach {
    dependsOn('customAvroCodeGeneration')
}